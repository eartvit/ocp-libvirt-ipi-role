---
################
#
- name: Create Initial required directory as {{ kvm_workdir }}
  when: kvm_install == "true" or kvm_install == "minimal"
  become: true
  tags: install
  file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: 0755
    state: directory
  with_items:
    - "{{ kvm_workdir }}"

- name: Prepare/Create directories
  when: kvm_install == "true" or kvm_install == "minimal"
  become: true
  tags: install
  module_defaults:
    shell:
      chdir: "{{ kvm_workdir }}"
  block:
    - name: Create required directories under {{ kvm_workdir }}
      tags: install
      file:
        path: "{{ item }}"
        owner: root
        group: root
        mode: 0755
        state: directory
      with_items:
        - "{{ kvm_workdir }}"
        - "{{ kvm_workdir }}/go"
        - "{{ kvm_workdir }}/go-build"
        - "{{ kvm_workdir }}/ocp"

    - name: Create pool directory for images under {{ kvm_pool_location }}
      tags: install
      file:
        path: "{{ item }}"
        owner: root
        group: root
        mode: 0755
        state: directory
        setype: virt_var_lib_t
      with_items:
        - "{{ kvm_pool_location }}"

    - name: Create /var/lib/libvirt/openshift-images symlink to {{ kvm_pool_location }}
      tags: install
      file:
        src: "{{ kvm_pool_location }}"
        dest: /var/lib/libvirt/openshift-images
        state: link
        setype: virt_var_lib_t
      when: kvm_pool_location  != "/var/lib/libvirt/openshift-images"

    - name: Repair SELinux contexts ( {{ kvm_pool_location }} )
      tags: install
      changed_when: false
      shell: |
        /sbin/semanage fcontext -a -t virt_var_lib_t "{{ kvm_pool_location }}(/.*)?"
        /sbin/restorecon -rv {{ kvm_pool_location }}

################
#
- name: Install KVM
  when: kvm_install == "true"
  become: true
  tags: install
  module_defaults:
    shell:
      chdir: "{{ kvm_workdir }}"
  block:
    - name: Installing KVM Packages
      ignore_errors: yes
      yum:
        name:
          - libvirt
          - libvirt-devel
          - libvirt-daemon-kvm
          - qemu-kvm
          - NetworkManager
          - python3-netaddr
          - unzip
          - tar
        state: present

    - name: Installing firewalld
      yum:
        name:
          - firewalld
        state: present
      when: kvm_firewall == "firewalld"

    - name: Enable and Start firewalld
      become: true
      systemd:
        name: firewalld
        state: started
        enabled: yes
      when: kvm_firewall == "firewalld"

    # Update qemu to +2.4 because option fw_cfg added in 2.4
    #  "qemu-kvm: -fw_cfg: invalid option"
    #  https://github.com/qemu/qemu/commit/81b2b81062612e
    - name: Add repos centos-release-openstack-stein (Centos7)
      when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "7"
      yum:
        name: centos-release-openstack-stein
        state: present

    - name: Disable all openstack repos except centos-qemu-ev (Centos7)
      when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "7"
      command: "yum-config-manager -q --disable centos-ceph-nautilus centos-nfs-ganesha28 centos-openstack-stein"

    - name: Add repo for rhel-7-server-rhv-4-mgmt-agent-rpms (RHEL7)
      when: ansible_distribution == "RedHat" and ansible_distribution_major_version == "7"
      #become: true
      shell: |
        subscription-manager repos --enable="rhel-7-server-rhv-4-mgmt-agent-rpms"

    - name: Upgrade all packages, include update qemu-kvm to >2.4 (Centos7 And RHEL7)
      when: (ansible_distribution == "CentOS" and ansible_distribution_major_version == "7") or
            (ansible_distribution == "RedHat" and ansible_distribution_major_version == "7")
    # because we added repo centos-qemu-ev from openstack
      yum:
        name: '*'
        state: latest

    - name: Enable and Start network
      become: true
      systemd:
        name: NetworkManager
        state: started
        enabled: yes

    - name: Enable and Start libvirtd
      systemd:
        name: libvirtd
        state: stopped
        enabled: yes

    - name: Enable and Start libvirtd-tcp.socket
      #when: ansible_distribution == "Fedora"
      systemd:
        name: libvirtd-tcp.socket
        state: restarted
        enabled: yes

    - name: Enable and Start libvirtd
      systemd:
        name: libvirtd
        state: started
        enabled: yes

    - name: Verify KVM module is loaded
      shell: "lsmod | grep -i kvm"
      register: result
      failed_when: "result.rc != 0"

    - name: Install Load Balancer
      when: lb == "true"
      become: true
      block:
        - name: Install needed packages
          yum:
            name:
              - haproxy
              - python3-netaddr
            state: present

#        - name: Write out haproxy config file
#          template:
#            src: haproxy.cfg.j2
#            dest: /etc/haproxy/haproxy.cfg


        - name: Get Firewalld ZONE
          shell: "IFADDR=$(nmcli con show '{{ kvm_interface }}' | grep ipv4.addresses | awk -F ':                         ' '{print $2}' | awk -F / '{print $1}') ; echo $IFADDR"
          register: publicaddress


        - stat:
            path: /etc/haproxy/haproxy.cfg
          register: haproxy_file

        - name: Write out haproxy config file header
          when: not haproxy_file.stat.exists
          blockinfile:
            path: /etc/haproxy/haproxy.cfg
            create: yes
            insertbefore: BOF
            block: |
              global
                  log         127.0.0.1 local2
                  chroot      /var/lib/haproxy
                  pidfile     /var/run/haproxy.pid
                  maxconn     4000
                  user        haproxy
                  group       haproxy
                  daemon
                  stats socket /var/lib/haproxy/stats
              defaults
                  mode                    http
                  log                     global
                  option                  httplog
                  option                  dontlognull
                  option http-server-close
                  option forwardfor       except 127.0.0.0/8
                  option                  redispatch
                  retries                 3
                  timeout http-request    10s
                  timeout queue           1m
                  timeout connect         10s
                  timeout client          1m
                  timeout server          1m
                  timeout http-keep-alive 10s
                  timeout check           10s
                  maxconn                 3000
              listen stats
                  bind :9000
                  mode http
                  stats enable
                  stats uri /
                  monitor-uri /healthz
              frontend openshift-api-server
                  bind *:6443
                  default_backend default-openshift-api-server
                  tcp-request inspect-delay 5s
                  tcp-request content accept if { req_ssl_hello_type 1 }
                  mode tcp
                  option tcplog
              frontend ingress-http
                  bind *:80
                  default_backend default-ingress-http
                  mode tcp
                  option tcplog
              frontend ingress-https
                  bind *:443
                  default_backend default-ingress-securehttps
                  tcp-request inspect-delay 5s
                  tcp-request content accept if { req_ssl_hello_type 1 }
                  mode tcp
                  option tcplog
              backend default-openshift-api-server
                  balance source
                  mode tcp
              backend default-ingress-http
                  balance source
                  mode tcp
              backend default-ingress-securehttps
                  balance source
                  mode tcp


        - name: Create ACL in HAproxy frontend API
          ansible.builtin.lineinfile:
            path: /etc/haproxy/haproxy.cfg
            insertafter: '    default_backend default-openshift-api-server'
            line: "    use_backend {{ metadata.name }}-openshift-api-server if { req.ssl_sni -m sub {{ metadata.name }}.{{ baseDomain }} }"


        - name: Create ACL in HAproxy frontend HTTPS
          ansible.builtin.lineinfile:
            path: /etc/haproxy/haproxy.cfg
            insertafter: '    default_backend default-ingress-securehttps'
            line: "    use_backend {{ metadata.name }}-ingress-https if { req.ssl_sni -m sub {{ metadata.name }}.{{ baseDomain }} }"


        - name: Create ACL in HAproxy frontend HTTP
          ansible.builtin.lineinfile:
            path: /etc/haproxy/haproxy.cfg
            insertafter: '    default_backend default-ingress-http'
            line: "    use_backend {{ metadata.name }}-ingress-http if { hdr_end(host) -i .{{ metadata.name }}.{{ baseDomain }} }"


        - name: Create backends haproxy file
          template:
            src: haproxy.cfg.back.j2
            dest: /etc/haproxy/haproxy.cfg.back.tmp


        - name: Remove HAPROXY backends config for this cluster
          blockinfile:
            path: /etc/haproxy/haproxy.cfg
            marker: "######## {{ metadata.name }} {mark} ########"
            state: absent


        - name: Create haproxy file
          shell: |
            cat /etc/haproxy/haproxy.cfg.back.tmp >> /etc/haproxy/haproxy.cfg


        - name: Remove temp file for haproxy config
          file:
            path: haproxy.cfg.back.tmp
            state: absent

        - name: SEBool allow haproxy connect any port
          ignore_errors: yes
          shell: "setsebool -P haproxy_connect_any 1"

        - name: Starting services
          service:
            name: "{{ item }}"
            enabled: yes
            state: restarted
          with_items:
            - haproxy

################
#
- name: Install NFS requirements
  when: nfs_storage == "true"
  become: true
  tags: install
  block:
    - name: Install needed packages for NFS
      yum:
        name: 
          - nfs-utils
          - rpcbind
        state: latest

    - name: Set user and group for NFS nobody ( Fedora/Centos/RHEL 8 )
      set_fact:
        nfs_user: "nobody"
        nfs_group: "nobody"

#    - name: Set user and group for NFS nobody ( Fedora/Centos/RHEL 7 )
#      set_fact:
#        nfs_user: "nfsnobody"
#        nfs_group: "nfsnobody"

    - name: Create mountable dirs ( Fedora / CentOS / RHEL )
      when: ansible_distribution == "Fedora" or
            ansible_distribution == "CentOS" or
            ansible_distribution == "RedHat"
      ignore_errors: yes
      file:
        path: "{{ item }}"
        state: directory
        mode: 0777
        owner: "{{ nfs_user }}"
        group: "{{ nfs_group }}"
      with_items:
        - "{{ nfs_export_path }}/"
        - "{{ nfs_export_path }}/{{ metadata.name }}"
        - "{{ nfs_export_path }}/{{ metadata.name }}/static"
        - "{{ nfs_export_path }}/{{ metadata.name }}/static/registry"
        - "{{ nfs_export_path }}/{{ metadata.name }}/dynamic"

    - name: FIX permissions
      shell: |
        chmod -R 777 {{ nfs_export_path }}/*

    - name: Configure /etc/exports
      when: nfs_etc_exports_overwrite == "true"
      copy:
        dest: "/etc/exports"
        content: |
          {{ nfs_export_path }}	*(rw,sync,no_root_squash)

    - name: Enable nfs-server
      when: nfs_etc_exports_overwrite == "true"
      systemd:
        name: nfs-server
        state: restarted
        enabled: True


################
#
- name: Prepare KVM
  when: kvm_configure == "true"
  become: true
  tags: install
  module_defaults:
    shell:
      chdir: "{{ kvm_workdir }}"
  block:
    - name: Enable IP Forwarding
      shell: "sysctl net.ipv4.ip_forward=1"

    - name: Make IP Forwarding configuration persistent
      lineinfile:
        path: /etc/sysctl.conf
        line: "net.ipv4.ip_forward = 1"
        insertbefore: BOF

    - name: Configure libvirt listen_tls
      lineinfile:
        path: /etc/libvirt/libvirtd.conf
        regexp: 'listen_tls'
        line: listen_tls = 0

    - name: Configure libvirt listen_tcp
      when: ansible_distribution != "Fedora"    
      lineinfile:
        path: /etc/libvirt/libvirtd.conf
        regexp: 'listen_tcp'
        line: listen_tcp = 1

    - name: Configure libvirt auth_tcp
      lineinfile:
        path: /etc/libvirt/libvirtd.conf
        regexp: 'auth_tcp'
        line: auth_tcp="none"

    - name: Configure libvirt tcp_port
      lineinfile:
        path: /etc/libvirt/libvirtd.conf
        regexp: 'tcp_port'
        line: tcp_port = "16509"


# Not needed anymore, now you have to start libvirtd-tcp.socket
#
#    - name: Configure libvirt LIBVIRTD_ARGS
#      when: ansible_distribution != "Fedora"        
#      lineinfile:
#        path: /etc/sysconfig/libvirtd
#        regexp: 'LIBVIRTD_ARGS'
#        line: LIBVIRTD_ARGS="--listen"

    - name: restart libvirt
      become: true
      systemd:
        name: libvirtd
        state: restarted

    - name: Configure Iptables
      become: true
      ignore_errors: yes
      shell: |
        set -x
        iptables -D INPUT -p tcp -s {{ ocp_machine_network }} -d {{ kvm_libvirt_network_gw }} -j ACCEPT -m comment --comment 'Allow insecure libvirt clients'
        #iptables -D INPUT -p tcp  --dport 16509 -j ACCEPT -m comment --comment 'Allow insecure libvirt clients'
        iptables -I INPUT 1 -p tcp -s {{ ocp_machine_network }} -d {{ kvm_libvirt_network_gw }} -j ACCEPT -m comment --comment 'Allow insecure libvirt clients'
        #iptables -I INPUT 1 -p tcp --dport 16509 -j ACCEPT -m comment --comment 'Allow insecure libvirt clients'
        iptables-save > /etc/iptables.conf
      when: kvm_firewall == "iptables"

    - name: Configure Firewalld
      become: true
      ignore_errors: yes
      shell: |
        firewall-cmd --permanent --new-service=ocpapi
        firewall-cmd --permanent --new-service=libvirttcp
        firewall-cmd --permanent --service=ocpapi --add-port=6443/tcp
        firewall-cmd --permanent --service=libvirttcp --add-port=16509/tcp
        firewall-cmd --zone=libvirt --add-service=libvirt --permanent
        firewall-cmd --zone=libvirt --add-port=443/tcp --permanent
        firewall-cmd --zone=libvirt --add-port=80/tcp --permanent
        firewall-cmd --zone=libvirt --add-service=dns --permanent
        firewall-cmd --zone=libvirt --add-service=nfs --permanent
        firewall-cmd --zone=libvirt --add-service=ocpapi --permanent
        firewall-cmd --zone=libvirt --add-service=libvirttcp --permanent
        firewall-cmd --zone=libvirt --add-rich-rule "rule family="ipv4" source address=0.0.0.0/0 accept"  --permanent
        firewall-cmd --add-masquerade --zone=public --permanent
        firewall-cmd --reload
      when: kvm_firewall == "firewalld"

    - name: Create a directory /etc/NetworkManager/conf.d if it does not exist
      file:
        path: /etc/NetworkManager/conf.d
        state: directory
        mode: '0755'

    - name: Finish Host network configuration
      copy:
        dest:  /etc/NetworkManager/conf.d/openshift.conf
        content: |
          [main]
          dns=dnsmasq

    - name: Create a directory /etc/NetworkManager/dnsmasq.d if it does not exist
      file:
        path: /etc/NetworkManager/dnsmasq.d
        state: directory
        mode: '0755'

    - name: DNS config without lb
      when: lb  != "true"
      become: true
      block:
        - name: Finish Host network configuration
          when: controlPlane.replicas != 1
          copy:
            dest:  /etc/NetworkManager/dnsmasq.d/openshift-{{ metadata.name }}.conf
            content: |
              server=/{{ baseDomain }}/{{ ocp_cluster_net_gw }}
              address=/.apps.{{ metadata.name }}.{{ baseDomain }}/{{ ocp_apps_vip  }}
        - name: Finish Host network configuration
          when: controlPlane.replicas == 1
          copy:
            dest:  /etc/NetworkManager/dnsmasq.d/openshift-{{ metadata.name }}.conf
            content: |
              server=/{{ baseDomain }}/{{ ocp_cluster_net_gw }}
              address=/.apps.{{ metadata.name }}.{{ baseDomain }}/{{ ocp_api_vip  }}

    - name: DNS config with lb
      when: lb == "true"
      copy:
        dest:  /etc/NetworkManager/dnsmasq.d/openshift-{{ metadata.name }}.conf
        content: |
          server=/{{ baseDomain }}/{{ ocp_cluster_net_gw }}
          address=/.apps.{{ metadata.name }}.{{ baseDomain }}/{{ ocp_cluster_net_gw  }}

    - name: Configure DNS external servers
      shell: nmcli con mod "{{ kvm_interface }}" ipv4.dns "{{ kvm_ext_dns }} 8.8.4.4"

    - name: Reload network
      become: true
      systemd:
        name: NetworkManager
        state: reloaded

    - name: Configure DNS external servers
      shell: 'echo "nameserver {{ kvm_ext_dns }}" >> /etc/resolv.conf'

    - name: Enable Nested Virtualization
      shell: |
        cat /proc/cpuinfo  | grep "model name" | head -n 1 | grep -i Intel
        if [ $? -ne 0 ]; then   PROC=amd; else     PROC=intel; fi
        modprobe -r kvm_$PROC
        modprobe kvm_$PROC nested=1
        sed -i "s/#options kvm_$PROC nested=1/options kvm_$PROC nested=1/g"  /etc/modprobe.d/kvm.conf
      when: kvm_nestedvirtualization == "true"
